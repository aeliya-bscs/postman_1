{
	"info": {
		"_postman_id": "868f05eb-3ffa-4eb1-85a1-d6de8ab0fa04",
		"name": "reqResCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21586374",
		"_collection_link": "https://postmangirls-1350.postman.co/workspace/My-Workspace~c5a15a37-1012-46fc-8b8f-642d30804cfc/collection/21586374-868f05eb-3ffa-4eb1-85a1-d6de8ab0fa04?action=share&source=collection_link&creator=21586374"
	},
	"item": [
		{
			"name": "getUserList",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response time should be less than 200ms\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "createUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Removed the redundant environment variable set",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"pm.test(\"Response has the required fields - name, job, id, and createdAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.job).to.exist;",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.createdAt).to.exist;",
							"    pm.environment.set(\"userid\", responseData.id);   ",
							"    const userid = pm.environment.get(\"userid\");",
							"    console.log(`User ID: ${userid}`);   ",
							"",
							"});",
							"",
							"",
							"pm.test(\"Name and job are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Job is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.job).to.be.a('string');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// let name = pm.variables.replaceIn('{{$randomName}}')\r",
							"// let job = pm.variables.replaceIn('{{$randomName}}')\r",
							"// console.log(name)\r",
							"// console.log(job)\r",
							"//   pm.environment.set(\"name\", name)\r",
							"//   pm.environment.set(\"job\", job)\r",
							"\r",
							"let name = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"let job = pm.variables.replaceIn('{{$randomJob}}');\r",
							" console.log(name)\r",
							" console.log(job)\r",
							"pm.environment.set(\"name\", name);\r",
							"pm.environment.set(\"job\", job);\r",
							"pm.environment.get(\"variable_key\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$name}}\",\r\n    \"job\": \"{{$job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "getSingleUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for response time",
							"pm.test(\"Response time is less than 700ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(700);",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - name, job, and updatedAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('job');",
							"    pm.expect(responseData).to.have.property('updatedAt');",
							"});",
							"",
							"",
							"pm.test(\"Name and job must be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Job is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.job).to.be.a('string');",
							"  // Add additional checks for the specific format of job property if necessary",
							"});",
							"",
							"",
							"pm.test(\"UpdatedAt is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?Z$/, \"UpdatedAt should be in valid date format\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userid}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in"
		}
	]
}